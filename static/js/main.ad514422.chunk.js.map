{"version":3,"sources":["components/Jumbotron.jsx","components/SearchBox.jsx","secrets.js","actions/index.js","components/Movie.jsx","components/Button.jsx","components/SearchResults.jsx","components/FavouritesList.jsx","components/Router.js","App.jsx","registerServiceWorker.js","reducers/movies.js","reducers/favourites.js","reducers/index.js","index.js"],"names":["Jumbotron","className","SearchBox","props","handleSearch","e","preventDefault","url","state","query","fetch","method","then","response","json","jsonObj","movies","results","Form","inline","FormGroup","controlId","FormControl","type","placeholder","onChange","event","setState","target","value","bsstyle","onClick","this","Component","connect","items","Movie","handleAddFavourite","favourited","addToFavourites","movie","handleRemoveFavourite","removeFromFavourites","displayFavouriteIcon","style","color","cursor","title","formatDate","moviedate","split","reverse","join","href","id","rel","src","poster_path","alt","showFavButton","release_date","overview","aria-hidden","vote_average","Button","children","to","SearchResults","process","map","item","key","FavouritesList","top","favourites","fav","Router","exact","path","component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","action","currentFavourites","filter","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ad514422.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Jumbotron = () => (\n  <div className=\"row\">\n    <div className=\"jumbotron text-center\">\n      <h1 className=\"display-4\">Movies App</h1>\n      <p className=\"lead\">Type the name of your favourite movie below, then click the search button</p>\n    </div>\n  </div>\n);\n\nexport default Jumbotron;","import React, { Component } from \"react\";\n\nimport { Form, FormControl, FormGroup, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { API_KEY } from \"../secrets\";\nimport { movies } from \"../actions\";\n\nclass SearchBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: \"\",\n    };\n  }\n\n  handleSearch = (e) => {\n    e.preventDefault();\n    let url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&page=1&query=${this.state.query}`;\n    fetch(url, {\n      method: \"GET\",\n    })\n      .then((response) => response.json())\n      .then((jsonObj) => {\n        this.props.movies(jsonObj.results);\n      });\n  };\n\n  render() {\n    return (\n      <Form inline>\n        <FormGroup controlId=\"formBasicText\">\n          <FormControl\n            type=\"text\"\n            placeholder=\"Name of movie\"\n            onChange={(event) =>\n              this.setState({\n                query: event.target.value,\n              })\n            }\n          />{\" \"}\n          <Button bsstyle=\"primary\" type=\"submit\" onClick={this.handleSearch}>\n            Search\n          </Button>\n        </FormGroup>\n      </Form>\n    );\n  }\n}\n\nexport default connect(null, { movies })(SearchBox);\n","export const API_KEY=\"9e3969625ef8f48544c758b0ad30cd72\"","export const MOVIES = \"MOVIES\";\nexport const ADD_FAV = \"ADD_FAV\";\nexport const REMOVE_FAV = \"REMOVE_FAV\";\n\nexport const movies = items => {\n  const action = {\n    type: MOVIES,\n    items\n  }\n  return action;\n}\n\nexport const addToFavourites = movie => {\n  const action = {\n    type: ADD_FAV,\n    movie\n  }\n  return action;\n}\n\nexport const removeFromFavourites = movie => {\n  const action = {\n    type: REMOVE_FAV,\n    movie\n  }\n  return action;\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { addToFavourites, removeFromFavourites } from \"../actions\";\nimport { connect } from \"react-redux\";\n\nclass Movie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      favourited: false,\n    };\n  }\n\n  handleAddFavourite = () => {\n    this.setState({\n      favourited: !this.state.favourited,\n    });\n    this.props.addToFavourites(this.props.movie);\n  };\n\n  handleRemoveFavourite = () => {\n    this.setState({\n      favourited: !this.state.favourited,\n    });\n    this.props.removeFromFavourites(this.props.movie);\n  };\n\n  displayFavouriteIcon = () => {\n    return !this.state.favourited ? (\n      <span\n        className=\"glyphicon glyphicon-heart-empty\"\n        onClick={this.handleAddFavourite}\n        style={{ color: \"gold\", cursor: \"pointer\" }}\n        title=\"Add to favourites\"\n      ></span>\n    ) : (\n      <span\n        className=\"glyphicon glyphicon-heart\"\n        onClick={this.handleRemoveFavourite}\n        style={{ color: \"gold\", cursor: \"pointer\" }}\n        title=\"Remove from favourites\"\n      ></span>\n    );\n  };\n\n  formatDate = (moviedate) => {\n    return moviedate.split(\"-\").reverse().join(\"/\");\n  };\n\n  render() {\n    const movie = this.props.movie;\n    return (\n      <div className=\"col-xs-12 col-sm-6 col-md-4\">\n        <div className=\"thumbnail\">\n          <a\n            href={`https://www.themoviedb.org/movie/${movie.id}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={`https://image.tmdb.org/t/p/w342${movie.poster_path}`}\n              alt=\"None\"\n            />\n          </a>\n          <div className=\"caption\">\n            <h3>\n              {movie.title}{\" \"}\n              {!this.props.showFavButton && this.displayFavouriteIcon()}\n            </h3>\n            <p>\n              <strong>{this.formatDate(movie.release_date)}</strong>\n            </p>\n            <p id=\"overview\">{movie.overview}</p>\n            <p>\n              User Score:{\" \"}\n              <span className=\"badge badge-default\">\n                <span\n                  className=\"glyphicon glyphicon-star\"\n                  aria-hidden=\"true\"\n                ></span>{\" \"}\n                {movie.vote_average}\n              </span>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovie.propTypes = {\n  movie: PropTypes.object.isRequired,\n  showFavButton: PropTypes.bool,\n};\n\nexport default connect(null, { addToFavourites, removeFromFavourites })(Movie);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nconst Button = ({ url, type, children }) => (\n    <Link to={url} className={`btn btn-${type}`}>{children}</Link>\n);\n\nButton.propTypes = {\n    url: PropTypes.string.isRequired,\n    type: PropTypes.string,\n    children: PropTypes.string.isRequired\n}\n\nexport default Button;","import React, { Component } from \"react\";\nimport SearchBox from \"./SearchBox\";\nimport Movie from \"./Movie\";\nimport { connect } from \"react-redux\";\nimport Button from \"./Button\";\n\nclass SearchResults extends Component {\n  render() {\n    return(\n      <div>\n        <div>\n          <div className=\"col-xs-12 col-sm-4\">\n            <Button url={process.env.PUBLIC_URL + '/favourites'} type=\"info\" >View my Favourites</Button>\n          </div>        \n          <SearchBox />\n        </div>\n        <hr />\n        {this.props.movies.map(item => \n          (<Movie key={item.id} movie={item} />)\n        )}\n      </div>\n    )\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    movies: state.movies\n  }\n}\n\nexport default connect(mapStateToProps, null)(SearchResults);","import React, { Component } from \"react\";\nimport Movie from \"./Movie\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"./Button\";\n\nclass FavouritesList extends Component {\n\n  render() {\n    return(\n      <div>\n        <div className=\"col-xs-12\">\n          <Button url={process.env.PUBLIC_URL ? \"/movies-app\" : \"/\"} type=\"info\">Back to Search</Button>\n          <h4>My Favourite Movies <span className=\"glyphicon glyphicon-heart\" style={{ color: \"gold\", top: \"3px\"}}></span></h4>\n          <hr />\n        </div>            \n          {this.props.favourites.map(fav => (\n            <Movie key={fav.id} movie={fav} showFavButton />\n          ))}        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    favourites: state.favourites\n  }\n}\n\nexport default connect(mapStateToProps, null)(FavouritesList);","import React from 'react';\nimport { \n  BrowserRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport SearchResults from \"./SearchResults\";\nimport FavouritesList from \"./FavouritesList\";\n\nconst Router = () => (\n  <div className=\"row\">\n    <BrowserRouter>\n      <Switch>\n        <Route exact path={process.env.PUBLIC_URL + '/'} component={SearchResults} />\n        <Route exact path={process.env.PUBLIC_URL + '/favourites'} component={FavouritesList} />\n      </Switch>\n    </BrowserRouter>\n  </div>\n);\n\nexport default Router;","import React from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Router from \"./components/Router\";\n\nconst App = () => (\n  <div className=\"container-fluid\">\n    <Jumbotron />\n    <div className=\"container\">\n      <Router />\n    </div>\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { MOVIES } from \"../actions\";\n\nconst movies = (state = [], action) => {\n  switch(action.type) {\n    case MOVIES:\n      return action.items\n    default:\n      return state;\n  } \n}\n\nexport default movies;","import { ADD_FAV, REMOVE_FAV } from \"../actions\";\n\nconst favourites = (state = [], action) => {\n  switch(action.type) {\n    case ADD_FAV:\n      let currentFavourites = [ ...state, action.movie];\n      return currentFavourites;\n    case REMOVE_FAV:\n      currentFavourites = state.filter(item => item.id !== action.movie.id);\n      return currentFavourites;\n    default:\n      return state;\n  }\n}\n\nexport default favourites;","import movies from \"./movies\";\nimport favourites from \"./favourites\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  movies,\n  favourites\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport { Provider } from \"react-redux\";\nimport  { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}